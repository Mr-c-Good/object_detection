#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.16
# In conjunction with Tcl version 8.6
#    Aug 29, 2018 10:54:12 AM IST  platform: Linux

import time

import config

try:
    from Tkinter import *
except ImportError:
    from tkinter import *
    import tkinter

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import detector_gui_support
from detector import Detector
import cv2
import PIL
from PIL import Image, ImageTk


def callback(image):
    shape = (int(top.top.cget("width")), int(top.top.cget("height")))
    # print("Shape", shape)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image, (640, 360))
    top.photo = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(image))
    top.playbackcanvas.create_image(0, 0, image=top.photo, anchor=tkinter.NW)


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root, top
    root = Tk()
    top = New_Toplevel(root)
    detector_gui_support.init(root, top)
    root.mainloop()


w = None


def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = New_Toplevel(w)
    detector_gui_support.init(w, top, *args, **kwargs)
    # rt.mainloop()
    return (w, top)


def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def __init__(self, top=None):
        # conn = sqlite3.connect('test.db')
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'

        top.geometry("670x440")
        top.title("Helmet Detector")
        top.configure(highlightcolor="black")

        self.count = -1

        self.detector = Detector()
        self.started = False

        self.current_video_file = config.get_video_source()

        # TODO change this to reflect config changes
        self.vid = cv2.VideoCapture(self.current_video_file)

        self.top = top

        self.buttonpane = Frame(top)
        self.buttonpane.place(relx=0.02, rely=0.02, relheight=0.1, relwidth=0.96)

        self.buttonpane.configure(relief=GROOVE)
        self.buttonpane.configure(borderwidth="2")
        self.buttonpane.configure(relief=GROOVE)
        self.buttonpane.configure(width=575)

        self.set_source_button = Button(self.buttonpane)
        self.set_source_button.place(relx=0.02, rely=0.22, height=26, width=100)
        self.set_source_button.configure(activebackground="#d9d9d9")
        self.set_source_button.configure(command=detector_gui_support.on_set_video_source)
        self.set_source_button.configure(text='''Set Video''')

        self.load_model_button = Button(self.buttonpane)
        self.load_model_button.place(relx=0.18, rely=0.22, height=26, width=100)
        self.load_model_button.configure(activebackground="#d9d9d9")
        self.load_model_button.configure(command=detector_gui_support.on_load_model)
        self.load_model_button.configure(text='''Load Model''')

        self.start_button = Button(self.buttonpane)
        self.start_button.place(relx=0.34, rely=0.21, height=26, width=100)
        self.start_button.configure(activebackground="#d9d9d9")
        self.start_button.configure(command=detector_gui_support.on_start)
        self.start_button.configure(text='''Start''')

        self.pause_button = Button(self.buttonpane)
        self.pause_button.place(relx=0.50, rely=0.21, height=26, width=100)
        self.pause_button.configure(activebackground="#d9d9d9")
        self.pause_button.configure(command=detector_gui_support.on_pause)
        self.pause_button.configure(text='''Pause''')

        self.stop_button = Button(self.buttonpane)
        self.stop_button.place(relx=0.66, rely=0.21, height=26, width=100)
        self.stop_button.configure(activebackground="#d9d9d9")
        self.stop_button.configure(command=detector_gui_support.on_stop)
        self.stop_button.configure(text='''Stop''')

        self.history_button = Button(self.buttonpane)
        self.history_button.place(relx=0.82, rely=0.21, height=26, width=100)
        self.history_button.configure(activebackground="#d9d9d9")
        self.history_button.configure(command=detector_gui_support.on_history)
        self.history_button.configure(text='''History''')

        self.playbackpane = Frame(top)
        self.playbackpane.place(relx=0.02, rely=0.13, relheight=0.83
                                , relwidth=0.96)
        self.playbackpane.configure(relief=GROOVE)
        self.playbackpane.configure(borderwidth="2")
        self.playbackpane.configure(relief=GROOVE)
        self.playbackpane.configure(width=575)

        self.playbackcanvas = Canvas(self.playbackpane)
        self.playbackcanvas.place(relx=0.0, rely=0.0, relheight=1
                                  , relwidth=1)
        self.playbackcanvas.configure(relief=RIDGE)
        self.playbackcanvas.configure(selectbackground="#c4c4c4")

    def restart_video(self):
        self.vid = cv2.VideoCapture(self.current_video_file)

    def update(self):
        # print(config.get_video_source())
        self.count = (self.count + 1)
        # print(count, count%10)
        if self.started:
            # Get a frame from the video source
            ret, frame = self.vid.read()
            if ret:
                if self.count % 10 == 0:
                    start_time = time.time()
                    self.detector.predict(frame, callback)
                    print("Took {} millis".format((time.time() - start_time) * 100))
            else:
                self.started = False
            self.top.after(self.delay, self.update)


if __name__ == '__main__':
    vp_start_gui()
